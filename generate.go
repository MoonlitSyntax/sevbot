//go:build ignore

package main

import (
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"log"
	"os"
	"reflect"
	"strings"
)

// generateToMap 为指定的结构体类型生成ToMap方法
func generateToMap(structName, packageName string, fields []FieldInfo) string {
	var sb strings.Builder
	
	sb.WriteString(fmt.Sprintf("// ToMap converts %s to map[string]any (generated)\n", structName))
	sb.WriteString(fmt.Sprintf("func (s *%s) ToMap() map[string]any {\n", structName))
	sb.WriteString("\tresult := make(map[string]any)\n")
	
	for _, field := range fields {
		jsonTag := field.JSONTag
		if jsonTag == "" {
			jsonTag = strings.ToLower(field.Name)
		}
		
		if field.Omitempty {
			// 生成omitempty检查
			sb.WriteString(fmt.Sprintf("\tif !isZero(s.%s) {\n", field.Name))
			sb.WriteString(fmt.Sprintf("\t\tresult[\"%s\"] = s.%s\n", jsonTag, field.Name))
			sb.WriteString("\t}\n")
		} else {
			sb.WriteString(fmt.Sprintf("\tresult[\"%s\"] = s.%s\n", jsonTag, field.Name))
		}
	}
	
	sb.WriteString("\treturn result\n")
	sb.WriteString("}\n\n")
	
	return sb.String()
}

type FieldInfo struct {
	Name      string
	Type      string
	JSONTag   string
	Omitempty bool
}

func parseStructFields(structName, fileName string) ([]FieldInfo, error) {
	fset := token.NewFileSet()
	node, err := parser.ParseFile(fset, fileName, nil, parser.ParseComments)
	if err != nil {
		return nil, err
	}

	var fields []FieldInfo
	
	ast.Inspect(node, func(n ast.Node) bool {
		if ts, ok := n.(*ast.TypeSpec); ok && ts.Name.Name == structName {
			if st, ok := ts.Type.(*ast.StructType); ok {
				for _, field := range st.Fields.List {
					for _, name := range field.Names {
						fieldInfo := FieldInfo{
							Name: name.Name,
							Type: fmt.Sprintf("%T", field.Type), // 简化的类型处理
						}
						
						// 解析JSON标签
						if field.Tag != nil {
							tag := field.Tag.Value
							tag = strings.Trim(tag, "`")
							
							if strings.Contains(tag, "json:") {
								parts := strings.Split(tag, "json:\"")
								if len(parts) > 1 {
									jsonPart := strings.Split(parts[1], "\"")[0]
									tagParts := strings.Split(jsonPart, ",")
									if tagParts[0] != "" && tagParts[0] != "-" {
										fieldInfo.JSONTag = tagParts[0]
									}
									fieldInfo.Omitempty = len(tagParts) > 1 && tagParts[1] == "omitempty"
								}
							}
						}
						
						fields = append(fields, fieldInfo)
					}
				}
			}
		}
		return true
	})
	
	return fields, nil
}

func main() {
	// 生成主要API请求结构体的ToMap方法
	structs := []string{
		"SendPrivateMessageRequest",
		"SendGroupMessageRequest",
		"HandleFriendAddRequest", 
		"HandleGroupAddRequest",
	}
	
	var output strings.Builder
	output.WriteString("// Code generated by go generate; DO NOT EDIT.\n\n")
	output.WriteString("package sevbot\n\n")
	output.WriteString("import \"reflect\"\n\n")
	
	// 添加isZero辅助函数
	output.WriteString("// isZero checks if a value is zero\n")
	output.WriteString("func isZero(v interface{}) bool {\n")
	output.WriteString("\treturn reflect.ValueOf(v).IsZero()\n")
	output.WriteString("}\n\n")
	
	for _, structName := range structs {
		fields, err := parseStructFields(structName, "api.go")
		if err != nil {
			log.Printf("Error parsing %s: %v", structName, err)
			continue
		}
		
		output.WriteString(generateToMap(structName, "sevbot", fields))
	}
	
	// 写入生成的文件
	err := os.WriteFile("generated_tomap.go", []byte(output.String()), 0644)
	if err != nil {
		log.Fatal(err)
	}
	
	fmt.Println("Generated ToMap methods in generated_tomap.go")
}